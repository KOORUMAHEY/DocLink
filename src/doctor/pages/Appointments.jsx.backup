'use client';

import { useState, useEffect, lazy, Suspense, useMemo, memo } from 'react';
import { getAppointmentsByDoctor, rescheduleAppointment as rescheduleAppointmentService, approveAppointment as approveAppointmentService, rejectAppointment as rejectAppointmentService } from '@/features/appointments/services/appointmentService';
import { Card, CardContent } from '@/components/ui/card';
import { Badge } from '@/components/ui/badge';
import { Button } from '@/components/ui/button';
import { Avatar, AvatarFallback, AvatarImage } from '@/components/ui/avatar';
import { Calendar, Clock, Search } from 'lucide-react';
import { Input } from '@/components/ui/input';
import { Skeleton } from '@/components/ui/skeleton';
import { useToast } from '@/hooks/use-toast';
// Removed duplicate import
import { format } from 'date-fns';
import { cn } from '@/lib/utils';

// Lazy load heavy components
const LazyCalendar = lazy(() => import('@/components/ui/calendar'));
const LazyPopover = lazy(() => import('@/components/ui/popover'));
const LazyAppointmentDetailsPanel = lazy(() => import('@/doctor/components/AppointmentDetailsPanel'));

// Memoized Appointment Card Component
const AppointmentCard = memo(({ 
  appointment, 
  isSelected, 
  onSelect, 
  getStatusColor, 
  getPriorityColor 
}) => (
  <Card 
    className={cn(
      "cursor-pointer transition-all duration-200 hover:shadow-md",
      isSelected 
        ? "ring-2 ring-blue-500 shadow-md" 
        : "hover:shadow-sm"
    )}
    onClick={() => onSelect(appointment)}
  >
    <CardContent className="p-4">
      <div className="flex items-center gap-3">
        <Avatar className="w-10 h-10">
          <AvatarImage src={appointment.patientAvatar} />
          <AvatarFallback className="bg-gradient-to-br from-blue-500 to-purple-600 text-white">
            {appointment.patientName?.charAt(0) || 'P'}
          </AvatarFallback>
        </Avatar>
        <div className="flex-1 min-w-0">
          <h3 className="font-semibold text-gray-900 truncate">
            {appointment.patientName}
          </h3>
          <div className="flex items-center gap-2 text-sm text-muted-foreground">
            <Calendar className="w-3 h-3" />
            {new Date(appointment.appointmentDate).toLocaleDateString()}
            <Clock className="w-3 h-3 ml-2" />
            {appointment.timeSlot}
          </div>
        </div>
        <div className="flex flex-col items-end gap-1">
          <Badge className={getStatusColor(appointment.status)} size="sm">
            {appointment.status}
          </Badge>
          {appointment.healthPriority && (
            <Badge className={getPriorityColor(appointment.healthPriority)} size="sm">
              {appointment.healthPriority}
            </Badge>
          )}
        </div>
      </div>
    </CardContent>
  </Card>
));

AppointmentCard.displayName = 'AppointmentCard';
